// This file was generated by modules-webmake (modules for web) project.
// See: https://github.com/medikoo/modules-webmake

(function (modules) {
	'use strict';

	var resolve, getRequire, wmRequire, notFoundError, findFile
	  , extensions = {".js":[],".json":[],".css":[],".html":[]}
	  , envRequire = typeof require === 'function' ? require : null;

	notFoundError = function (path) {
		var error = new Error("Could not find module '" + path + "'");
		error.code = 'MODULE_NOT_FOUND';
		return error;
	};
	findFile = function (scope, name, extName) {
		var i, ext;
		if (typeof scope[name + extName] === 'function') return name + extName;
		for (i = 0; (ext = extensions[extName][i]); ++i) {
			if (typeof scope[name + ext] === 'function') return name + ext;
		}
		return null;
	};
	resolve = function (scope, tree, path, fullPath, state, id) {
		var name, dir, exports, module, fn, found, ext;
		path = path.split(/[\\/]/);
		name = path.pop();
		if ((name === '.') || (name === '..')) {
			path.push(name);
			name = '';
		}
		while ((dir = path.shift()) != null) {
			if (!dir || (dir === '.')) continue;
			if (dir === '..') {
				scope = tree.pop();
				id = id.slice(0, id.lastIndexOf('/'));
			} else {
				tree.push(scope);
				scope = scope[dir];
				id += '/' + dir;
			}
			if (!scope) throw notFoundError(fullPath);
		}
		if (name && (typeof scope[name] !== 'function')) {
			found = findFile(scope, name, '.js');
			if (!found) found = findFile(scope, name, '.json');
			if (!found) found = findFile(scope, name, '.css');
			if (!found) found = findFile(scope, name, '.html');
			if (found) {
				name = found;
			} else if ((state !== 2) && (typeof scope[name] === 'object')) {
				tree.push(scope);
				scope = scope[name];
				id += '/' + name;
				name = '';
			}
		}
		if (!name) {
			if ((state !== 1) && scope[':mainpath:']) {
				return resolve(scope, tree, scope[':mainpath:'], fullPath, 1, id);
			}
			return resolve(scope, tree, 'index', fullPath, 2, id);
		}
		fn = scope[name];
		if (!fn) throw notFoundError(fullPath);
		if (fn.hasOwnProperty('module')) return fn.module.exports;
		exports = {};
		fn.module = module = { exports: exports, id: id + '/' + name };
		fn.call(exports, exports, module, getRequire(scope, tree, id));
		return module.exports;
	};
	wmRequire = function (scope, tree, fullPath, id) {
		var name, path = fullPath, t = fullPath.charAt(0), state = 0;
		if (t === '/') {
			path = path.slice(1);
			scope = modules['/'];
			if (!scope) {
				if (envRequire) return envRequire(fullPath);
				throw notFoundError(fullPath);
			}
			id = '/';
			tree = [];
		} else if (t !== '.') {
			name = path.split('/', 1)[0];
			scope = modules[name];
			if (!scope) {
				if (envRequire) return envRequire(fullPath);
				throw notFoundError(fullPath);
			}
			id = name;
			tree = [];
			path = path.slice(name.length + 1);
			if (!path) {
				path = scope[':mainpath:'];
				if (path) {
					state = 1;
				} else {
					path = 'index';
					state = 2;
				}
			}
		}
		return resolve(scope, tree, path, fullPath, state, id);
	};
	getRequire = function (scope, tree, id) {
		return function (path) {
			return wmRequire(scope, [].concat(tree), path, id);
		};
	};
	return getRequire(modules, [], '');
})({
	"vkApp": {
		"model.js": function (exports, module, require) {
			module.exports = {
			    login: function(appId, perms) {
			        return new Promise(function(resolve, reject) {
			            VK.init({
			                apiId: appId
			            });

			            VK.Auth.getLoginStatus(function(response) {
			                if (response.session) {
			                    resolve(response);
			                }
			                else { 
			                    VK.Auth.login(function(response) {
			                        if (response.session) {
			                            resolve(response);
			                        } else {
			                            reject(new Error('Не удалось авторизоваться'));
			                        }
			                    }, perms);
			                }
			            });   
			                     
			        });
			    },
			    callApi: function(method, params) {
			        return new Promise(function(resolve, reject) {
			            VK.api(method, params, function(response) {

			                if (response.error) {
			                    reject(new Error(response.error.error_msg));
			                } else {
			                    resolve(response.response);
			                }


			            });

			        });
			    },
			    getUser: function() {
			        return this.callApi('users.get', {});
			    },
			    getMusic: function() {
			        return this.callApi('audio.get', {});
			    },
			    getFriends: function() {
			        return this.callApi('friends.get', { fields: 'photo_100' });
			    },
			    getNews: function() {
			        return this.callApi('newsfeed.get', { filters: 'post', count: 20 });
			    },
			    getGroups: function() {
			        return this.callApi('groups.get', { extended: 1, v: '5.60' });
			    },
			    getPhotos : function() {
			        return this.callApi('photos.get', { album_id: 'profile', extended: 1, v: '5.60' });
			    },
			    getComments: function(photo_id) {
			        return this.callApi('photos.getComments', { photo_id: photo_id, extended: 1, v: '5.60' })
			        .then(function(response){
			            return new Promise(function(resolve){

			                var result = [],
			                i = 0;
			                response.items.forEach(function(element){
			                    result[i] = {};
			                    result[i].text = element.text;

			                    // если есть коменты от пользователей
			                    if( response.profiles.length > 0 ){
			                        for( var j = 0; j < response.profiles.length; j++){

			                            if( response.profiles[j].id === element.from_id ) {

			                                result[i].first_name = response.profiles[j].first_name;
			                                result[i].last_name = response.profiles[j].last_name;
			                                result[i].photo_50 = response.profiles[j].photo_50;
			                                break;

			                            }

			                        }
			                    }

			                    // если есть коменты от сообществ
			                    if( response.groups.length > 0 ){
			                        for( var j = 0; j < response.groups.length; j++){

			                            if( response.groups[j].id === element.from_id ) {

			                                result[i].first_name = response.groups[j].first_name;
			                                result[i].last_name = response.groups[j].last_name;
			                                result[i].photo_50 = response.groups[j].photo_50;
			                                break;

			                            }

			                        }
			                    }
			                    i++;                
			                });

			                resolve( result );

			            });
			            
			        });   
			    }

			};
		}
	}
})("vkApp/model");
